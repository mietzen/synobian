diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index d13474c6d..244ec7938 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -63,6 +63,12 @@
 
 #include "libata.h"
 #include "libata-transport.h"
+#include <linux/mutex.h>
+static struct mutex mutex_spin;
+static DEFINE_MUTEX(mutex_spin);
+
+#include <linux/syno_gpio.h>
+#include <linux/synolib.h>
 
 const struct ata_port_operations ata_base_port_ops = {
 	.prereset		= ata_std_prereset,
@@ -160,6 +166,239 @@ MODULE_LICENSE("GPL");
 MODULE_VERSION(DRV_VERSION);
 
 
+extern SYNO_GPIO syno_gpio;
+#ifdef CONFIG_SYNO_PORT_MAPPING_V2
+#else
+static SYNO_GPIO_INFO hdd_detect = {
+	.name 			= "hdd detect",
+	.nr_gpio		= 0,
+	.gpio_port 		= {0},
+	.gpio_polarity	= ACTIVE_LOW,
+};
+static SYNO_GPIO_INFO hdd_enable = {
+	.name 			= "hdd enable",
+	.nr_gpio		= 0,
+	.gpio_port		= {0},
+	.gpio_polarity	= ACTIVE_HIGH,
+};
+static SYNO_GPIO_INFO hdd_act_led = {
+	.name 			= "hdd act led",
+	.nr_gpio		= 0,
+	.gpio_port		= {0},
+	.gpio_polarity	= ACTIVE_HIGH,
+};
+ 
+static int hdd_bootargs_parser (SYNO_GPIO_INFO *gpio_info, char *args)
+{
+	int pin_num = 0;
+	char *endp;
+	if (NULL == args || NULL == gpio_info) {
+		return -EINVAL;
+	}
+	while (1) {
+		if(SYNO_GPIO_PIN_MAX_NUM < pin_num) {
+			return -EMSGSIZE;
+		}
+		gpio_info->gpio_port[pin_num] = simple_strtol(args, &endp, 10) & 0xFF;
+		pin_num++;
+		 
+		if (*endp == '\0') {
+			break;
+		}
+		args = ++endp;
+	}
+	gpio_info->nr_gpio = pin_num;
+	return 0;
+}
+static int __init early_hdd_detect(char *p)
+{
+	int i, ret;
+	 
+	if ((NULL == p) || (0 == strlen(p))) {
+		return 1;
+	}
+	printk("SYNO GPIO hdd detect pin: ");
+	ret = hdd_bootargs_parser(&hdd_detect, p);
+	if (-EINVAL == ret) {
+		printk("Error parameters, %s\n", p);
+	} else if (-EMSGSIZE == ret) {
+		printk("Too many arguments, %s\n", p);
+	} else {
+		syno_gpio.hdd_detect = &hdd_detect;
+		for (i = 0; i < syno_gpio.hdd_detect->nr_gpio; i++) {
+			printk("%d ", HDD_DETECT_PIN(i + 1));
+		}
+		printk("\n");
+	}
+	return 1;
+}
+__setup("syno_hdd_detect=", early_hdd_detect);
+static int __init early_hdd_act_led(char *p)
+{
+	int i, ret;
+	 
+	if ((NULL == p) || (0 == strlen(p))) {
+		return 1;
+	}
+	printk("SYNO GPIO hdd active led pin: ");
+	ret = hdd_bootargs_parser(&hdd_act_led, p);
+	if (-EINVAL == ret) {
+		printk("Error parameters, %s\n", p);
+	} else if (-EMSGSIZE == ret) {
+		printk("Too many arguments, %s\n", p);
+	} else {
+		syno_gpio.hdd_act_led = &hdd_act_led;
+		for (i = 0; i < syno_gpio.hdd_act_led->nr_gpio; i++) {
+			printk("%d ", HDD_ACT_LED_PIN(i + 1));
+		}
+		printk("\n");
+	}
+	return 1;
+}
+__setup("syno_hdd_act_led=", early_hdd_act_led);
+static int __init early_hdd_enable(char *p)
+{
+	int i, ret;
+	 
+	if ((NULL == p) || (0 == strlen(p))) {
+		return 1;
+	}
+	printk("SYNO GPIO hdd enable pin: ");
+	ret = hdd_bootargs_parser(&hdd_enable, p);
+	if (-EINVAL == ret) {
+		printk("Error parameters, %s\n", p);
+	} else if (-EMSGSIZE == ret) {
+		printk("Too many arguments, %s\n", p);
+	} else {
+		syno_gpio.hdd_enable = &hdd_enable;
+		for (i = 0; i < syno_gpio.hdd_enable->nr_gpio; i++) {
+			printk("%d ", HDD_ENABLE_PIN(i + 1));
+		}
+		printk("\n");
+	}
+	return 1;
+}
+__setup("syno_hdd_enable=", early_hdd_enable);
+#endif  
+
+int SYNO_CTRL_HDD_POWERON(int index, int value)
+{
+#ifdef CONFIG_SYNO_SMBUS_HDD_POWERCTL
+	if (0 < g_smbus_hdd_powerctl) {
+		if (!SynoSmbusHddPowerCtl.bl_init){
+			syno_smbus_hdd_powerctl_init();
+		}
+		if (NULL != SynoSmbusHddPowerCtl.syno_smbus_hdd_enable_write) {
+			SynoSmbusHddPowerCtl.syno_smbus_hdd_enable_write(gSynoSmbusHddAdapter, gSynoSmbusHddAddress, index, value);
+		}
+		return 0;
+	}
+#endif  
+	if (!HAVE_HDD_ENABLE(index)) {  
+		printk("No such hdd enable pin. Index: %d\n", index);
+		WARN_ON(1);
+		return -EINVAL;
+	}
+	SYNO_GPIO_WRITE(HDD_ENABLE_PIN(index), value);
+
+	return 0;
+}
+EXPORT_SYMBOL(SYNO_CTRL_HDD_POWERON);
+ 
+int SYNO_CHECK_HDD_DETECT(int index)
+{
+	int ret;
+#ifdef CONFIG_SYNO_SMBUS_HDD_POWERCTL
+	if (0 < g_smbus_hdd_powerctl) {
+		if (!SynoSmbusHddPowerCtl.bl_init){
+			syno_smbus_hdd_powerctl_init();
+		}
+		if ( NULL != SynoSmbusHddPowerCtl.syno_smbus_hdd_present_read) {
+			ret = SynoSmbusHddPowerCtl.syno_smbus_hdd_present_read(gSynoSmbusHddAdapter, gSynoSmbusHddAddress, index);
+			return ret;
+		}
+		return 0;
+	}
+#endif  
+	if (!HAVE_HDD_DETECT(index)) {  
+		 
+		return 1;
+	}
+	ret = SYNO_GPIO_READ(HDD_DETECT_PIN(index));
+	 
+#ifdef CONFIG_SYNO_PORT_MAPPING_V2
+	if (ACTIVE_LOW == HDD_DETECT_POLARITY(index)) {
+#else
+	if (ACTIVE_LOW == HDD_DETECT_POLARITY()) {
+#endif  
+		return !ret;
+	}
+	return ret;
+}
+EXPORT_SYMBOL(SYNO_CHECK_HDD_DETECT);
+ 
+int SYNO_SUPPORT_HDD_DYNAMIC_ENABLE_POWER(void)
+{
+#ifdef CONFIG_SYNO_SMBUS_HDD_POWERCTL
+	if ( 0 < g_smbus_hdd_powerctl || HAVE_HDD_ENABLE(1)) {
+#else  
+	 
+	if (HAVE_HDD_ENABLE(1)) {
+#endif  
+		return 1;
+	}
+	return 0;
+}
+EXPORT_SYMBOL(SYNO_SUPPORT_HDD_DYNAMIC_ENABLE_POWER);
+#if defined(CONFIG_SYNO_PORT_MAPPING_V2)  
+#else
+int SYNO_CTRL_GPIO_HDD_ACT_LED(int index, int value)
+{
+	index++;   
+	if (!HAVE_HDD_ACT_LED(index)) {
+		printk("No such hdd act led pin. Index: %d\n", index);
+		WARN_ON(1);
+		return -EINVAL;
+	}
+	SYNO_GPIO_WRITE(HDD_ACT_LED_PIN(index), value);
+	return 0;
+}
+EXPORT_SYMBOL(SYNO_CTRL_GPIO_HDD_ACT_LED);
+#endif  
+#ifdef CONFIG_SYNO_PORT_MAPPING_V2
+#else
+static SYNO_GPIO_INFO redundant_power_detect = {
+	.name 			= "redundant power detect",
+	.nr_gpio		= 0,
+	.gpio_port		= {0},
+	.gpio_polarity	= ACTIVE_LOW,
+};
+static int __init early_redundant_power_detect(char *p)
+{
+	int i, ret;
+	 
+	if ((NULL == p) || (0 == strlen(p))) {
+		return 1;
+	}
+	printk("SYNO GPIO redundant power detect pin: ");
+	ret = hdd_bootargs_parser(&hdd_detect, p);
+	if (-EINVAL == ret) {
+		printk("Error parameters, %s\n", p);
+	} else if (-EMSGSIZE == ret) {
+		printk("Too many arguments, %s\n", p);
+	} else {
+		syno_gpio.redundant_power_detect = &redundant_power_detect;
+		for (i = 0; i < syno_gpio.redundant_power_detect->nr_gpio; i++) {
+			printk("%d ", RP_DETECT_PIN(i + 1));
+		}
+		printk("\n");
+	}
+	return 1;
+}
+__setup("syno_rp_detect=", early_redundant_power_detect);
+#endif
+
+
 static bool ata_sstatus_online(u32 sstatus)
 {
 	return (sstatus & 0xf) == 0x3;
@@ -5676,11 +5915,41 @@ void ata_host_init(struct ata_host *host, struct device *dev,
 }
 EXPORT_SYMBOL_GPL(ata_host_init);
 
+static inline void SleepForLatency(void)
+{
+	mdelay(3000);
+}
+
+extern long g_syno_hdd_powerup_seq;
+
+static void HddPowerOn(struct ata_port *pAp) {
+	int iSynoDiskIdx = -1;
+	if (!pAp) {
+		goto END;
+	}
+
+	/*iSynoDiskIdx = syno_libata_index_get(pAp->scsi_host, 0, 0, 0) + 1;*/
+	iSynoDiskIdx = pAp->print_id;
+	 
+	g_syno_hdd_powerup_seq = 2;
+
+	if (0 < g_syno_hdd_powerup_seq && g_syno_hdd_powerup_seq < iSynoDiskIdx) {
+		goto END;
+	}
+
+	if (1 == SYNO_CHECK_HDD_DETECT(iSynoDiskIdx)) {
+		/*DBG_SpinupGroup("Power on disk: %d\n", iSynoDiskIdx);*/
+		SYNO_CTRL_HDD_POWERON(iSynoDiskIdx, 1);
+		SleepForLatency();
+	}
+END:
+	return;
+}
+
 void __ata_port_probe(struct ata_port *ap)
 {
 	struct ata_eh_info *ehi = &ap->link.eh_info;
 	unsigned long flags;
-
 	/* kick EH for boot probing */
 	spin_lock_irqsave(ap->lock, flags);
 
@@ -5698,10 +5967,33 @@ void __ata_port_probe(struct ata_port *ap)
 int ata_port_probe(struct ata_port *ap)
 {
 	int rc = 0;
+	unsigned long flags;
+	int giSynoSpinupGroupNum = 0;
+	 
+	if (0 < giSynoSpinupGroupNum) {
+		mutex_lock(&mutex_spin);
+	}	 
+
+	if (0 < giSynoSpinupGroupNum) {
+		mutex_unlock(&mutex_spin);
+	}
+	 
+	if (SYNO_SUPPORT_HDD_DYNAMIC_ENABLE_POWER()) {
+		HddPowerOn(ap);
+	}
 
 	if (ap->ops->error_handler) {
 		__ata_port_probe(ap);
 		ata_port_wait_eh(ap);
+
+		spin_lock_irqsave(ap->lock, flags);
+		if (ap->pflags & ATA_PFLAG_PMP_DISCONNECT ||
+				 ap->pflags & ATA_PFLAG_PMP_CONNECT) {
+			 
+			ap->pflags &= ~ATA_PFLAG_PMP_DISCONNECT;
+			ap->pflags &= ~ATA_PFLAG_PMP_CONNECT;
+		}
+		spin_unlock_irqrestore(ap->lock, flags);
 	} else {
 		DPRINTK("ata%u: bus probe begin\n", ap->print_id);
 		rc = ata_bus_probe(ap);
